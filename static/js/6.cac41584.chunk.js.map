{"version":3,"sources":["Client/authForm/AuthForm.module.scss","Client/authForm/AuthForm.js","pages/authPage/AuthPage.js"],"names":["module","exports","initialForm","email","password","validationSchema","Yup","shape","min","required","max","FormControl","label","props","id","useMemo","Math","floor","random","toString","useField","field","meta","className","css","form_control_container","htmlFor","error","touched","input_error","input","box_error_message","error_message_text","AuthForm","useState","action","setAction","dispatch","useDispatch","form_container","initialValues","onSubmit","values","register","login","form","autoComplete","form_paragraph_container","form_paragraph","form_input_area","name","type","form_buttons","form_button","onClick","AuthPage"],"mappings":"iHACAA,EAAOC,QAAU,CAAC,eAAiB,iCAAiC,yBAA2B,2CAA2C,eAAiB,iCAAiC,gBAAkB,kCAAkC,MAAQ,wBAAwB,MAAQ,wBAAwB,YAAc,8BAA8B,kBAAoB,oCAAoC,mBAAqB,qCAAqC,aAAe,+BAA+B,YAAc,8BAA8B,iBAAmB,qC,iJCSrjBC,EAAc,CAAEC,MAAO,GAAIC,SAAU,IAErCC,EAAmBC,MAAaC,MAAM,CAC1CJ,MAAOG,MACJH,MADI,4HAEJK,IAAI,EAAG,mGACPC,SAAS,yHACZL,SAAUE,MACPG,SAAS,yHACTD,IAAI,EAAG,mGACPE,IAAI,GAAI,4GAGAC,EAAc,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAUC,EAAY,iBAC5CC,EAAKC,mBAAQ,kBAAMC,KAAKC,MAAsB,MAAhBD,KAAKE,UAAkBC,aAAY,IACvE,EAAsBC,YAASP,GAA/B,mBAAOQ,EAAP,KAAcC,EAAd,KAEA,OACE,qBAAKC,UAAWC,IAAIC,uBAApB,SACE,wBAAOF,UAAWC,IAAIZ,MAAOc,QAASZ,EAAtC,UACGF,EACD,+CACEE,GAAIA,EACJS,UACED,EAAKK,OAASL,EAAKM,QAAnB,UAAgCJ,IAAIK,aAApC,UAAuDL,IAAIM,QAEzDT,GACAR,IAEN,qBAAKU,UAAWC,IAAIO,kBAApB,SACGT,EAAKK,OAASL,EAAKM,SAClB,mBAAGL,UAAWC,IAAIQ,mBAAlB,SAAuCV,EAAKK,gBAQzC,SAASM,IACtB,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KAEMC,EAAWC,cAUjB,OACE,qBAAKf,UAAWC,IAAIe,eAApB,SACE,cAAC,IAAD,CACEC,cAAetC,EACfG,iBAAkBA,EAClBoC,SAbe,SAAAC,GACJ,aAAXP,EACFE,EAASM,YAASD,IACE,UAAXP,GACTE,EAASO,YAAMF,KAMf,SAKE,eAAC,IAAD,CAAMnB,UAAWC,IAAIqB,KAAMC,aAAa,MAAxC,UACE,qBAAKvB,UAAWC,IAAIuB,yBAApB,SACE,oBAAGxB,UAAWC,IAAIwB,eAAlB,oMAC6C,uBAD7C,gNAKF,sBAAKzB,UAAWC,IAAIyB,gBAApB,UACE,cAAC,EAAD,CAAarC,MAAM,qGAAqBsC,KAAK,QAAQC,KAAK,UAC1D,cAAC,EAAD,CAAavC,MAAM,wCAAUuC,KAAK,WAAWD,KAAK,aAClD,sBAAK3B,UAAWC,IAAI4B,aAApB,UACE,wBACED,KAAK,SACL5B,UAAWC,IAAI6B,YACfC,QAAS,kBAAMlB,EAAU,UAH3B,4CAQA,wBACEe,KAAK,SACL5B,UAAWC,IAAI6B,YACfC,QAAS,kBAAMlB,EAAU,aAH3B,6FC3ECmB,UAVE,WACf,OACE,8BACE,8BACE,cAACtB,EAAD","file":"static/js/6.cac41584.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form_container\":\"AuthForm_form_container__3TAPu\",\"form_paragraph_container\":\"AuthForm_form_paragraph_container__1YzcX\",\"form_paragraph\":\"AuthForm_form_paragraph__3i9I3\",\"form_input_area\":\"AuthForm_form_input_area__2EBzq\",\"label\":\"AuthForm_label__3VXbW\",\"input\":\"AuthForm_input__2ixMa\",\"input_error\":\"AuthForm_input_error__NUmms\",\"box_error_message\":\"AuthForm_box_error_message__1lgIF\",\"error_message_text\":\"AuthForm_error_message_text__3cNbk\",\"form_buttons\":\"AuthForm_form_buttons__1UsIO\",\"form_button\":\"AuthForm_form_button__2bQeC\",\"button_container\":\"AuthForm_button_container__1cG7p\"};","import React, { useMemo, useState } from 'react';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { login, register } from '../../redux/auth/auth.operations';\r\n\r\n///////////////////////////////Formik, YUP /////////////////////////////////////////////////\r\nimport { Form, Formik, useField } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport css from './AuthForm.module.scss';\r\n\r\nconst initialForm = { email: '', password: '' };\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  email: Yup.string()\r\n    .email(`* E-mail адрес введен неверно!`)\r\n    .min(5, '* Минимум 5 символов')\r\n    .required('*это обязательное поле'),\r\n  password: Yup.string()\r\n    .required('*это обязательное поле')\r\n    .min(5, '* Минимум 6 символов')\r\n    .max(20, '* Максимум 20 символов')\r\n});\r\n\r\nexport const FormControl = ({ label, ...props }) => {\r\n  const id = useMemo(() => Math.floor(Math.random() * 99999).toString(), []);\r\n  const [field, meta] = useField(props);\r\n\r\n  return (\r\n    <div className={css.form_control_container}>\r\n      <label className={css.label} htmlFor={id}>\r\n        {label}\r\n        <input\r\n          id={id}\r\n          className={\r\n            meta.error && meta.touched ? `${css.input_error}` : `${css.input}`\r\n          }\r\n          {...field}\r\n          {...props}\r\n        />\r\n        <div className={css.box_error_message}>\r\n          {meta.error && meta.touched && (\r\n            <p className={css.error_message_text}>{meta.error}</p>\r\n          )}\r\n        </div>\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default function AuthForm() {\r\n  const [action, setAction] = useState('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleSubmit = values => {\r\n    if (action === 'register') {\r\n      dispatch(register(values));\r\n    } else if (action === 'login') {\r\n      dispatch(login(values));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={css.form_container}>\r\n      <Formik\r\n        initialValues={initialForm}\r\n        validationSchema={validationSchema}\r\n        onSubmit={handleSubmit}\r\n      >\r\n        <Form className={css.form} autoComplete='off'>\r\n          <div className={css.form_paragraph_container}>\r\n            <p className={css.form_paragraph}>\r\n              Вы можете зайти с помощью e-mail и пароля, <br />\r\n              предварительно зарегистрировавшись:\r\n            </p>\r\n          </div>\r\n          <div className={css.form_input_area}>\r\n            <FormControl label='Электронная почта*' name='email' type='email' />\r\n            <FormControl label='Пароль*' type='password' name='password' />\r\n            <div className={css.form_buttons}>\r\n              <button\r\n                type='submit'\r\n                className={css.form_button}\r\n                onClick={() => setAction('login')}\r\n              >\r\n                Войти\r\n              </button>\r\n\r\n              <button\r\n                type='submit'\r\n                className={css.form_button}\r\n                onClick={() => setAction('register')}\r\n              >\r\n                Регистрация\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </Form>\r\n      </Formik>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport AuthForm from '../../Client/authForm/AuthForm';\r\n\r\nconst AuthPage = () => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <AuthForm />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuthPage;\r\n"],"sourceRoot":""}